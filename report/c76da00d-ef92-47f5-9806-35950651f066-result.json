{"name": "Test TIF conversion", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found in the current frame\n  (Session info: chrome=137.0.7151.68); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nStacktrace:\n#0 0xaaaac5f9e934 <unknown>\n#1 0xaaaac5a964f4 <unknown>\n#2 0xaaaac5a9cad0 <unknown>\n#3 0xaaaac5a9e548 <unknown>\n#4 0xaaaac5a9e60c <unknown>\n#5 0xaaaac5ad2de0 <unknown>\n#6 0xaaaac5aceb28 <unknown>\n#7 0xaaaac5b17b14 <unknown>\n#8 0xaaaac5acd1cc <unknown>\n#9 0xaaaac5f6b2a0 <unknown>\n#10 0xaaaac5f6e2a8 <unknown>\n#11 0xaaaac5f6de98 <unknown>\n#12 0xaaaac5f56250 <unknown>\n#13 0xaaaac5f6e8ec <unknown>\n#14 0xaaaac5f400ac <unknown>\n#15 0xaaaac5f8cd80 <unknown>\n#16 0xaaaac5f8cf64 <unknown>\n#17 0xaaaac5f9da8c <unknown>\n#18 0xffffb7acee9c <unknown>\n#19 0xffffb7b37b18 <unknown>", "trace": "self = <test_exe.TestExe object at 0xffffafb4dc90>\n\n    @allure.title(\"Test TIF conversion\")\n    def test_set_tif_conversion(self):\n        self.login_page().open()\n        self.login_page().login()\n        self.menu().settings.open_setting_market()\n        self.markers_pages().open_create()\n        self.markers_pages().create.choose_enable()\n        self.markers_pages().create.fill_name(\"karavan\")\n        self.markers_pages().create.fill_configuration(\"babu\")\n>       self.markers_pages().create.fill_market_type(\"OneZero\")\n\ntests/test_exe.py:90: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/markers_page/components/create.py:39: in fill_market_type\n    if market_type in element.text:\n../local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:109: in text\n    return self._execute(Command.GET_ELEMENT_TEXT)[\"value\"]\n../local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:572: in _execute\n    return self._parent.execute(command, params)\n../local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:448: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0xffffafb4e3d0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"stale element reference\",\"message\":\"stale element reference: stale elemen...\\\\n#17 0xaaaac5f9da8c \\\\u003Cunknown>\\\\n#18 0xffffb7acee9c \\\\u003Cunknown>\\\\n#19 0xffffb7b37b18 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found in the current frame\nE         (Session info: chrome=137.0.7151.68); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nE       Stacktrace:\nE       #0 0xaaaac5f9e934 <unknown>\nE       #1 0xaaaac5a964f4 <unknown>\nE       #2 0xaaaac5a9cad0 <unknown>\nE       #3 0xaaaac5a9e548 <unknown>\nE       #4 0xaaaac5a9e60c <unknown>\nE       #5 0xaaaac5ad2de0 <unknown>\nE       #6 0xaaaac5aceb28 <unknown>\nE       #7 0xaaaac5b17b14 <unknown>\nE       #8 0xaaaac5acd1cc <unknown>\nE       #9 0xaaaac5f6b2a0 <unknown>\nE       #10 0xaaaac5f6e2a8 <unknown>\nE       #11 0xaaaac5f6de98 <unknown>\nE       #12 0xaaaac5f56250 <unknown>\nE       #13 0xaaaac5f6e8ec <unknown>\nE       #14 0xaaaac5f400ac <unknown>\nE       #15 0xaaaac5f8cd80 <unknown>\nE       #16 0xaaaac5f8cf64 <unknown>\nE       #17 0xaaaac5f9da8c <unknown>\nE       #18 0xffffb7acee9c <unknown>\nE       #19 0xffffb7b37b18 <unknown>\n\n../local/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:232: StaleElementReferenceException"}, "start": 1749597120014, "stop": 1749597127993, "uuid": "4a18fce9-5e7f-4c87-8bac-eef0b806fe88", "historyId": "74c62d90f397090ad5529d9e5dd6481b", "testCaseId": "74c62d90f397090ad5529d9e5dd6481b", "fullName": "tests.test_exe.TestExe#test_set_tif_conversion", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_exe"}, {"name": "subSuite", "value": "TestExe"}, {"name": "host", "value": "d4f3a7b0249d"}, {"name": "thread", "value": "12-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_exe"}]}