{"name": "Test for user", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button class=\"e-tbar-btn e-tbtn-txt e-control e-btn e-lib\" type=\"button\" id=\"SaveRules\" tabindex=\"-1\" data-tabindex=\"-1\" aria-label=\"Save rules\" aria-disabled=\"false\" style=\"width: auto;\">...</button> is not clickable at point (210, 431). Other element would receive the click: <div class=\"e-dlg-overlay\" style=\"z-index: 1012; display: block; position: absolute;\"></div>\n  (Session info: chrome=137.0.7151.68)\nStacktrace:\n#0 0xaaaac842e934 <unknown>\n#1 0xaaaac7f264f4 <unknown>\n#2 0xaaaac7f6bcec <unknown>\n#3 0xaaaac7f6aa34 <unknown>\n#4 0xaaaac7f68fe4 <unknown>\n#5 0xaaaac7f68908 <unknown>\n#6 0xaaaac7f5f888 <unknown>\n#7 0xaaaac7f5eb28 <unknown>\n#8 0xaaaac7fa7b14 <unknown>\n#9 0xaaaac7f5d1cc <unknown>\n#10 0xaaaac83fb2a0 <unknown>\n#11 0xaaaac83fe2a8 <unknown>\n#12 0xaaaac83fde98 <unknown>\n#13 0xaaaac83e6250 <unknown>\n#14 0xaaaac83fe8ec <unknown>\n#15 0xaaaac83d00ac <unknown>\n#16 0xaaaac841cd80 <unknown>\n#17 0xaaaac841cf64 <unknown>\n#18 0xaaaac842da8c <unknown>\n#19 0xffffbb6cee9c <unknown>\n#20 0xffffbb737b18 <unknown>", "trace": "self = <test_exe.TestExe object at 0xffffb2c7d310>\n\n    @allure.title(\"Test for user\")\n    def test_adjust_position_for_taker(self):\n        self.login_page().open()\n        self.login_page().login()\n        self.menu().settings.open_setting_takers()\n        self.taker_page().open_create()\n        self.taker_page().create.fill_market_type(\"Takeprofit\")\n        self.taker_page().create.fill_taker(\"denver\")\n        self.taker_page().create.fill_account(\"alpaca\")\n        self.taker_page().create.fill_name(\"pablo\")\n        self.taker_page().create.choose_save_to_log_file()\n        self.taker_page().create.choose_save_to_csv_file()\n        self.taker_page().create.choose_enable()\n        self.taker_page().create.click_create()\n        self.taker_page().refresh_page()\n        self.taker_page().find_row_by_username(\"pablo\")\n        self.menu().settings.open_setting_price_channel()\n        self.price_channel_page().open_create()\n        self.price_channel_page().create.select_unselect_all_takers()\n        self.price_channel_page().create.fill_name(\"naso\")\n        self.price_channel_page().create.click_create()\n        self.price_channel_page().refresh_page()\n        self.price_channel_page().find_row_by_username(\"naso\")\n        self.price_channel_page().click_rules_row_by_username(\"naso\")\n        self.price_channel_page().rules.open_create()\n        self.price_channel_page().rules.create.fill_hub_symbol(\"EUR/USD$\")\n        self.price_channel_page().rules.create.click_create_rule()\n>       self.price_channel_page().rules.save_rules()\n\ntests/test_exe.py:175: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/price_channel_page/components/rules/rules.py:82: in save_rules\n    self.ui_helper.click(self._SAVE_RULES_BUTTON_LOCATOR)\nhelpers/ui_helper.py:62: in click\n    self.wait.until(self.EC.element_to_be_clickable(locator), message=f\"{element_name} is not clickable\").click()\n../local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:119: in click\n    self._execute(Command.CLICK_ELEMENT)\n../local/lib/python3.11/site-packages/selenium/webdriver/remote/webelement.py:572: in _execute\n    return self._parent.execute(command, params)\n../local/lib/python3.11/site-packages/selenium/webdriver/remote/webdriver.py:448: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0xffffb2dc4b90>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#18 0xaaaac842da8c \\\\u003Cunknown>\\\\n#19 0xffffbb6cee9c \\\\u003Cunknown>\\\\n#20 0xffffbb737b18 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button class=\"e-tbar-btn e-tbtn-txt e-control e-btn e-lib\" type=\"button\" id=\"SaveRules\" tabindex=\"-1\" data-tabindex=\"-1\" aria-label=\"Save rules\" aria-disabled=\"false\" style=\"width: auto;\">...</button> is not clickable at point (210, 431). Other element would receive the click: <div class=\"e-dlg-overlay\" style=\"z-index: 1012; display: block; position: absolute;\"></div>\nE         (Session info: chrome=137.0.7151.68)\nE       Stacktrace:\nE       #0 0xaaaac842e934 <unknown>\nE       #1 0xaaaac7f264f4 <unknown>\nE       #2 0xaaaac7f6bcec <unknown>\nE       #3 0xaaaac7f6aa34 <unknown>\nE       #4 0xaaaac7f68fe4 <unknown>\nE       #5 0xaaaac7f68908 <unknown>\nE       #6 0xaaaac7f5f888 <unknown>\nE       #7 0xaaaac7f5eb28 <unknown>\nE       #8 0xaaaac7fa7b14 <unknown>\nE       #9 0xaaaac7f5d1cc <unknown>\nE       #10 0xaaaac83fb2a0 <unknown>\nE       #11 0xaaaac83fe2a8 <unknown>\nE       #12 0xaaaac83fde98 <unknown>\nE       #13 0xaaaac83e6250 <unknown>\nE       #14 0xaaaac83fe8ec <unknown>\nE       #15 0xaaaac83d00ac <unknown>\nE       #16 0xaaaac841cd80 <unknown>\nE       #17 0xaaaac841cf64 <unknown>\nE       #18 0xaaaac842da8c <unknown>\nE       #19 0xffffbb6cee9c <unknown>\nE       #20 0xffffbb737b18 <unknown>\n\n../local/lib/python3.11/site-packages/selenium/webdriver/remote/errorhandler.py:232: ElementClickInterceptedException"}, "attachments": [{"name": 1749592464.1243892, "source": "6348ab3f-f9ab-4117-af83-2dbefc1b6edb-attachment.png", "type": "image/png"}, {"name": 1749592464.1243892, "source": "c1c11d57-9a25-44f5-a129-bc9e15441c37-attachment.png", "type": "image/png"}, {"name": 1749592464.1243892, "source": "e27787eb-9158-4ea9-bdd0-6b083c185765-attachment.png", "type": "image/png"}], "start": 1749592467145, "stop": 1749592486672, "uuid": "d58ac4b5-718e-401e-aceb-ed5a87a2fc7a", "historyId": "c7543bba2fa9e1ac576b868778f34565", "testCaseId": "c7543bba2fa9e1ac576b868778f34565", "fullName": "tests.test_exe.TestExe#test_adjust_position_for_taker", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_exe"}, {"name": "subSuite", "value": "TestExe"}, {"name": "host", "value": "b916b6fa6c8e"}, {"name": "thread", "value": "12-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_exe"}]}