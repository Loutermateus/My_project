{"name": "Test for user", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: None is not clickable", "trace": "self = <test_exe.TestExe object at 0xffff83d85190>\n\n    @allure.title(\"Test for user\")\n    def test_adjust_position_for_taker(self):\n        self.login_page().open()\n        self.login_page().login()\n        self.menu().settings.open_setting_takers()\n        self.taker_page().open_create()\n        self.taker_page().create.fill_market_type(\"Takeprofit\")\n        self.taker_page().create.fill_taker(\"denver\")\n        self.taker_page().create.fill_account(\"alpaca\")\n        self.taker_page().create.fill_name(\"pablo\")\n        self.taker_page().create.choose_save_to_log_file()\n        self.taker_page().create.choose_save_to_csv_file()\n        self.taker_page().create.choose_enable()\n        self.taker_page().create.click_create()\n        self.taker_page().refresh_page()\n        self.taker_page().find_row_by_username(\"pablo\")\n        self.menu().settings.open_setting_price_channel()\n        self.price_channel_page().open_create()\n        self.price_channel_page().create.select_unselect_all_takers()\n        self.price_channel_page().create.fill_name(\"naso\")\n        self.price_channel_page().create.click_create()\n        self.price_channel_page().refresh_page()\n        self.price_channel_page().find_row_by_username(\"naso\")\n        self.price_channel_page().click_rules_row_by_username(\"naso\")\n        self.price_channel_page().rules.open_create()\n        self.price_channel_page().rules.create.fill_hub_symbol(\"EUR/USD$\")\n        self.price_channel_page().rules.create.fill_taker_symbols(\"USD\")\n        self.price_channel_page().rules.create.click_create_rule()\n>       self.price_channel_page().rules.save_rules()\n\ntests/test_exe.py:176: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/price_channel_page/components/rules/rules.py:83: in save_rules\n    self.ui_helper.click(self._BUTTON_SAVE_OK_LOCATOR)\nhelpers/ui_helper.py:62: in click\n    self.wait.until(self.EC.element_to_be_clickable(locator), message=f\"{element_name} is not clickable\").click()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"4f65f03dd56cced947604d2d35a678a4\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0xffff835359e0>\nmessage = 'None is not clickable'\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: None is not clickable\n\n../local/lib/python3.11/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException"}, "attachments": [{"name": 1749593879.994319, "source": "578a5112-b855-4948-ba1e-788657bd3c82-attachment.png", "type": "image/png"}, {"name": 1749593879.994319, "source": "3510f1c8-2b79-4809-89d4-f73db7618cc6-attachment.png", "type": "image/png"}, {"name": 1749593879.994319, "source": "f29b8adb-8588-467c-920c-354b7f8ae5fe-attachment.png", "type": "image/png"}], "start": 1749593891234, "stop": 1749593938864, "uuid": "71a1967c-8d70-417f-b004-d6af12c768e9", "historyId": "c7543bba2fa9e1ac576b868778f34565", "testCaseId": "c7543bba2fa9e1ac576b868778f34565", "fullName": "tests.test_exe.TestExe#test_adjust_position_for_taker", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_exe"}, {"name": "subSuite", "value": "TestExe"}, {"name": "host", "value": "cef78b305cd2"}, {"name": "thread", "value": "9-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_exe"}]}