{"name": "Test adjust position", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message:", "trace": "self = <test_exe.TestExe object at 0x10533d950>\n\n    @allure.title(\"Test adjust position\")\n    def test_open_and_adjust_position(self):\n        self.login_page().open()\n        self.login_page().login()\n        self.menu().settings.open_setting_market()\n        self.markers_pages().open_action_position_by_name(\"pagoda\")\n        self.markers_pages().positions.open_adjust()\n        self.markers_pages().positions.adjust.fill_symbol(\"EUR/USD$\")\n        self.markers_pages().positions.adjust.fill_price(\"200\")\n        self.markers_pages().positions.adjust.fill_volume(\"100\")\n        self.markers_pages().positions.adjust.fill_comments(\"basta\")\n        self.markers_pages().positions.adjust.click_buy()\n        self.markers_pages().positions.adjust.click_ok()\n        self.markers_pages().refresh_page()\n        self.markers_pages().open_action_position_by_name(\"pagoda\")\n>       self.markers_pages().positions.find_row_by_username(\"EUR/USD$\")\n\ntests/test_exe.py:57: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/markers_page/components/positions/positions.py:52: in find_row_by_username\n    for i, row in enumerate(self._rows, start=1):\npages/markers_page/components/positions/positions.py:34: in _rows\n    return self.ui_helper.find_all(self._ROWS_LOCATOR, wait=True)\nhelpers/ui_helper.py:34: in find_all\n    return self.wait.until(self.EC.visibility_of_all_elements_located(locator))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"1606c8a4483e3efca3df0790b1381eae\")>\nmethod = <function visibility_of_all_elements_located.<locals>._predicate at 0x1053d3d80>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n.venv/lib/python3.13/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException"}, "steps": [{"name": "Step", "status": "passed", "parameters": [{"name": "name", "value": "'pagoda'"}], "start": 1749511933252, "stop": 1749511934374}, {"name": "Step", "status": "passed", "parameters": [{"name": "name", "value": "'pagoda'"}], "start": 1749511949193, "stop": 1749511950307}], "start": 1749511925010, "stop": 1749511965506, "uuid": "df591b74-3a7a-4139-a04b-88f944b990fa", "historyId": "36e9e6dea728ecd40c2e9e7f3372b7f1", "testCaseId": "36e9e6dea728ecd40c2e9e7f3372b7f1", "fullName": "tests.test_exe.TestExe#test_open_and_adjust_position", "labels": [{"name": "epic", "value": "Test tp"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_exe"}, {"name": "subSuite", "value": "TestExe"}, {"name": "host", "value": "Nikkis-MacBook-Air.local"}, {"name": "thread", "value": "86926-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_exe"}]}