{"name": "Test for user", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message:", "trace": "self = <test_exe.TestExe object at 0xffff8dff5a10>\n\n    @allure.title(\"Test for user\")\n    def test_adjust_position_for_taker(self):\n        self.login_page().open()\n        self.login_page().login()\n        self.menu().settings.open_setting_takers()\n        self.taker_page().open_create()\n        self.taker_page().create.fill_market_type(\"Takeprofit\")\n        self.taker_page().create.fill_taker(\"denver\")\n        self.taker_page().create.fill_account(\"alpaca\")\n        self.taker_page().create.fill_name(\"pablo\")\n        self.taker_page().create.choose_save_to_log_file()\n        self.taker_page().create.choose_save_to_csv_file()\n        self.taker_page().create.choose_enable()\n        self.taker_page().create.click_create()\n        self.taker_page().refresh_page()\n        self.taker_page().find_row_by_username(\"pablo\")\n        self.menu().settings.open_setting_price_channel()\n        self.price_channel_page().open_create()\n        self.price_channel_page().create.select_unselect_all_takers()\n        self.price_channel_page().create.fill_name(\"naso\")\n        self.price_channel_page().create.click_create()\n        self.price_channel_page().refresh_page()\n        self.price_channel_page().find_row_by_username(\"naso\")\n        self.price_channel_page().click_rules_row_by_username(\"naso\")\n        self.price_channel_page().rules.open_create()\n        self.price_channel_page().rules.create.fill_hub_symbol(\"EUR/USD$\")\n        self.price_channel_page().rules.create.fill_taker_symbols(\"USD\")\n        self.price_channel_page().rules.create.click_create_rule()\n>       self.price_channel_page().rules.save_rules()\n\ntests/test_exe.py:176: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/price_channel_page/components/rules/rules.py:83: in save_rules\n    self.ui_helper.find(self._BUTTON_SAVE_OK_LOCATOR, wait=True)\nhelpers/ui_helper.py:27: in find\n    return self.wait.until(self.EC.visibility_of_element_located(locator))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"640705793540673bd9ed565fbb77f488\")>\nmethod = <function visibility_of_element_located.<locals>._predicate at 0xffff8de7d940>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n../local/lib/python3.11/site-packages/selenium/webdriver/support/wait.py:146: TimeoutException"}, "attachments": [{"name": 1749593272.3938615, "source": "b72a1c6b-87bd-47ca-882a-9e766845df43-attachment.png", "type": "image/png"}, {"name": 1749593272.3938615, "source": "211874b9-dc70-4d74-a7fa-d354de850c04-attachment.png", "type": "image/png"}, {"name": 1749593272.3938615, "source": "2cb005ac-d96b-41da-8c53-2e631676e125-attachment.png", "type": "image/png"}], "start": 1749593316453, "stop": 1749593479439, "uuid": "b83e9f21-2246-45a7-87a9-17e4f193a555", "historyId": "c7543bba2fa9e1ac576b868778f34565", "testCaseId": "c7543bba2fa9e1ac576b868778f34565", "fullName": "tests.test_exe.TestExe#test_adjust_position_for_taker", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_exe"}, {"name": "subSuite", "value": "TestExe"}, {"name": "host", "value": "961b2f1f11ea"}, {"name": "thread", "value": "9-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_exe"}]}